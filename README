SBV: Symbolic Bit Vectors in Haskell
====================================

Express properties about bit-precise Haskell programs and automatically prove
them using SMT solvers.

        $ ghci
        Prelude> :m Data.SBV
        Prelude> :set -XScopedTypeVariables
        Prelude Data.SBV> prove $ \(x::SWord8) -> x `shiftL` 2 .== x*4
        Q.E.D.
        Prelude Data.SBV> prove $ \(x::SWord8) -> x `shiftL` 2 .== x
        Falsifiable. Counter-example:
          s0 = 128 :: [8U]

The function `prove` has the following type:
    
        prove :: Provable a => a -> IO ThmResult

The class `Provable` has instances for n-ary predicates that can be formed
as regular Haskell functions over symbolic signed and unsigned bit-vectors. Similar
functions for checking satisfiability (`sat` and `allSat`) are also provided.

Overview
========
The Haskell sbv library provides support for dealing with Symbolic Bit Vectors
in Haskell. It introduces the types:

  - `SBool`: symbolic booleans
  - `SWord8`, `SWord16`, `SWord32`, `SWord64`: Symbolic counterparts of Words (unsigned)
  - `SInt8`,  `SInt16`,  `SInt32`,  `SInt64`: Symbolic counterparts of Ints (signed)
  - Arrays of symbolic values

The user can construct ordinary Haskell programs using these types, which behave
very similar to their concrete counterparts. However, predicates (i.e., functions
that return `SBool`) built out of these types can be:

  - proven correct via an external SMT solver (the `prove` function)
  - checked for satisfiability (the `sat` and `allSat` functions)
  - quick-checked
  - or used with concrete values, as ordinary Haskell functions

If a predicate is not valid, `prove` will return a counterexample: An 
assignment to inputs such that the predicate fails. The `sat` function will
return a satisfying assignment, if there is one. The `allSat` function returns
all satisfying assignments, lazily.

The sbv library uses third-party SMT solvers via the standard SMT-Lib interface: 
[http://goedel.cs.uiowa.edu/smtlib/](http://goedel.cs.uiowa.edu/smtlib/)

While the library is designed to work with any SMT-Lib compliant SMT-solver,
solver specific support is required for parsing counter-example/model data since
there is currently no agreed upon format for getting models from arbitrary SMT
solvers. (The SMT-Lib2 initiative will potentially address this issue in the
future, at which point the sbv library can be generalized as well.) Currently, we
only support the Yices SMT solver from SRI as far as the counter-example
and model generation support is concerned:
[http://yices.csl.sri.com/](http://yices.csl.sri.com/) However, other solvers can
be hooked up with relative ease.

You **should** download and install Yices on your machine, and make sure the
"yices" executable is in your path before using the sbv library, as it is the
current default solver.

Examples
=========
Please see the files under the
[Examples](http://github.com/LeventErkok/sbv/tree/master/Data/SBV/Examples)
directory for a number of interesting applications and use cases. Amongst others,
it contains solvers for Sudoku and N-Queens puzzles as mandatory SMT solver examples in
the Puzzles directory.

Installation
============
The sbv library is cabalized. Assuming you have cabal/ghc installed, it should merely
be a matter of running cabal. Please see the INSTALL file for installation details.

Copyright, License
==================
The sbv library is distributed with the BSD3 license. See the COPYRIGHT file for
details. The LICENSE file contains the BSD3 verbiage.
