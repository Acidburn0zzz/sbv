-----------------------------------------------------------------------------
-- |
-- Module      :  Data.SBV.Compilers.C
-- Copyright   :  (c) Levent Erkok
-- License     :  BSD3
-- Maintainer  :  erkokl@gmail.com
-- Stability   :  experimental
-- Portability :  portable
--
-- Compilation of symbolic programs to C
-----------------------------------------------------------------------------

module Data.SBV.Compilers.C(compileToC) where

import Text.PrettyPrint.HughesPJ

import Data.SBV.BitVectors.Data (Outputtable(..), Result)
import Data.SBV.Compilers.CodeGen

-- token for the target language
data SBVToC = SBVToC

instance SBVTarget SBVToC where
  targetName _ = "C"
  translate _  = cgen

-- | Given a symbolic computation, render it as an equivalent
--   C program. The first argument is an optional directory name
--   under which the files will be saved. If `Nothing`, the result
--   will be written to stdout. Use @`Just` \".\"@ for creating files in
--   the current directory. The second argument is name of the function,
--   which also forms the names of the C and header files. The third argument
--   is the names of the arguments to be used and the names of the outputs, if any.
--   (Provide as many arguments as you like, SBV will make up ones if you don't pass
--   enough.) The final argument is the computation to be compiled.
compileToC :: (CgArgs a, Outputtable b) => Maybe FilePath -> String -> [String] -> (a -> b) -> IO ()
compileToC = codeGen SBVToC

cgen :: String -> Result -> [(FilePath, Doc)]
cgen nm sbvProg = [ (nm  ++ ".h", genHeader nm)
                  , (nm  ++ ".c", genCProg  nm)
                  , (nmd ++ ".c", genDriver nm)
                  , ("Makefile",  genMake   nm nmd)
                  ]
  where nmd = nm ++ "_driver"

-- | Generate the header
genHeader :: String -> Doc
genHeader nm = empty

-- | Generate the C program
genCProg :: String -> Doc
genCProg nm = empty

-- | Generate an example driver program
genDriver :: String -> Doc
genDriver nm = empty

-- | Generate a makefile for ease of experimentation..
genMake :: String -> String -> Doc
genMake fn dn =
     text "# Makefile for" <+> nm <> text ", automatically generated by SBV. Do not edit!"
  $$ text ""
  $$ text "CC=gcc"
  $$ text "CCFLAGS=-Wall -O3 -DNDEBUG -fomit-frame-pointer"
  $$ text ""
  $$ text "all:" <+> nmd
  $$ text ""
  $$ nmd <> text ":" <+> fsep [nmdc, nmc, nm <> text ".h"]
  $$ text "\t${CC} ${CCFLAGS}" <+> nmdc <+> nmc <+> text "-o" <+> nmd
  $$ text ""
  $$ text "clean:"
  $$ text "\trm" <+> nmd
  $$ text ""
 where nm  = text fn
       nmd = text dn
       nmc  = nm  <> text ".c"
       nmdc = nmd <> text ".c"
