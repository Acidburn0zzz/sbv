- Uninterpreted function/array counterexamples:
   - Currently not very robust in parsing Yices's output
   - Might be worth waiting till SMT-Lib2 stabilizes
- Top level CAF's might need to be specifically treated to
  make sure excessive sharing handles code generation as
  a side effect properly. (Seems to happen only in the
  presence of uninterpreted functions. Is this necessarily
  the case?)
- Investigate reifyGraph to see if the idea is applicable
- Should uninterpreted functions behave like other "free_"
  allocatable items? That would be a more consistent design,
  but the word/int assumption under free_ is a strong one. Need to
  explore the design space here.
- Integrate other SMT solvers
   - Candidates:
      - CVC3 (http://cs.nyu.edu/acsys/cvc3/)
      - Boolector (http://fmv.jku.at/boolector/)
      - STP (http://sites.google.com/site/stpfastprover/)
      - MathSat (http://mathsat4.disi.unitn.it/)
      - Z3 (http://research.microsoft.com/en-us/um/redmond/projects/z3/)
      - OpenSMT (http://verify.inf.unisi.ch/opensmt)
   - Potential issues (as of 2011 January):
      - MathSat is not open-source
      - Z3 is Windows only
      - OpenSMT has QF_BV support but not QF_AUFBV
- Support blasting specifications to generate AIGs
      - Potentially integrate with ABC (http://www.eecs.berkeley.edu/~alanmi/abc/)
- Better documentation
- CRC:
  - polynomial arithmetic: can we test more thorougly?
  - CCITT: 84-inhabitants issue; what's the semantics there?
  - GenPoly: is there a better way of generating good polynomials?
